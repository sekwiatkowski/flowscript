import { Equivalence, Future, List, Monoid, Option, Order, Predicate, Semigroup } from '..';
export declare class NonEmptyList<T> {
    private readonly items;
    private readonly length;
    constructor(items: T[]);
    first(): T;
    get(index: number): Option<T>;
    getArray(): T[];
    getOrElse(index: number, alternative: T | (() => T)): T;
    last(): T;
    take(n: number): NonEmptyList<T>;
    flatten<U>(this: NonEmptyList<NonEmptyList<U> | U[]>): NonEmptyList<U>;
    chain(f: (T: any) => NonEmptyList<T>): NonEmptyList<T>;
    concat(otherList: NonEmptyList<T>): NonEmptyList<T>;
    combine(other: T[], semigroup: Semigroup<T[]>): any;
    combine(other: NonEmptyList<T>, semigroup: Semigroup<NonEmptyList<T>>): NonEmptyList<T>;
    append(item: T): NonEmptyList<T>;
    prepend(item: T): NonEmptyList<T>;
    reduceBy<U>(by: (item: T) => U, operation: (a: U) => (b: U) => U): Option<U>;
    reduce(operation: (a: T) => (b: T) => T): Option<T>;
    reduceByWithSemigroup<U>(by: (item: T) => U, semigroup: Semigroup<U>): Option<U>;
    reduceWithSemigroup(semigroup: Semigroup<T>): Option<T>;
    foldBy<U>(by: (item: T) => U, operation: (a: U) => (b: U) => U, initialValue: U): U;
    fold(operation: (a: T) => (b: T) => T, initialValue: T): T;
    foldWithMonoid(monoid: Monoid<T>): T;
    foldByWithMonoid<U>(by: (item: T) => U, monoid: Monoid<U>): U;
    max(this: NonEmptyList<number>): number;
    earliest(this: List<Date>): Option<Date>;
    earliestBy<U>(this: List<T>, by: (item: T) => Date): Option<Date>;
    latest(this: List<Date>): Option<Date>;
    latestBy<U>(this: List<T>, by: (item: T) => Date): Option<Date>;
    maxBy(by: (item: T) => number): number;
    min(this: NonEmptyList<number>): number;
    minBy(by: (item: T) => number): number;
    sum(this: NonEmptyList<number>): number;
    sumBy(by: (item: T) => number): number;
    product(this: NonEmptyList<number>): number;
    productBy(by: (item: T) => number): number;
    groupBy(computeKey: (item: T) => string): {
        [id: string]: T[];
    };
    map<U>(f: (item: T) => U): NonEmptyList<U>;
    parallelMap<U, E>(f: (item: T) => U): Future<U[], E>;
    filter(predicate: ((item: T) => boolean) | Predicate<T>): List<T>;
    find(predicate: ((item: T) => boolean) | Predicate<T>): Option<T>;
    findLast(predicate: ((item: T) => boolean) | Predicate<T>): Option<T>;
    perform(sideEffect: (list: NonEmptyList<T>) => void): void;
    forEach(sideEffect: (item: T) => void): void;
    size(): number;
    sort(order?: Order<T>): List<T>;
    sortBy<U>(by: (item: T) => U): List<T>;
    sortDescendingly(): List<T>;
    sortDescendinglyBy<U>(by: (item: T) => U): List<T>;
    contains(item: T, itemEquality?: (((x: T, y: T) => boolean) | Equivalence<T>)): boolean;
    equals(otherList: NonEmptyList<T>): boolean;
    all(predicate: ((item: T) => boolean) | Predicate<T>): boolean;
    some(predicate: ((item: T) => boolean) | Predicate<T>): boolean;
    none(predicate: ((item: T) => boolean) | Predicate<T>): boolean;
    count(predicate: ((item: T) => boolean) | Predicate<T>): number;
    test(predicate: (items: T[]) => boolean): boolean;
    test(predicate: Predicate<T[]>): boolean;
}
export declare function list<T>(head: T, ...tail: T[]): NonEmptyList<T>;
export declare function inclusiveRange(start: number, end?: number): NonEmptyList<number>;
export declare const anyNonEmptyListEquality: Equivalence<NonEmptyList<any>>;
