import { Future, Option } from '..';
export declare class List<T> {
    private readonly items;
    private readonly length;
    constructor(items: T[]);
    first(predicate?: (item: T) => boolean): Option<T>;
    get(index: number): Option<T>;
    getArray(): T[];
    getOrElse(index: number, alternative: T | (() => T)): T;
    last(predicate?: (item: T) => boolean): Option<T>;
    take(n: number): List<T>;
    flatten<U>(this: List<List<U> | U[]>): List<U>;
    chain(f: (T: any) => List<T>): List<T>;
    concat(otherList: List<T>): List<T>;
    append(item: T): List<T>;
    prepend(item: T): List<T>;
    filter(predicate: (item: T) => boolean): List<T>;
    groupBy(computeKey: (item: T) => string): {
        [id: string]: T[];
    };
    map<U>(f: (item: T) => U): List<U>;
    parallelMap<U, E>(f: (item: T) => U): Future<U[], E>;
    match<X>(onNonEmpty: (array: T[]) => X, onEmpty: () => X): X;
    fold(f: (a: T, b: T) => T, initialValue: T): Option<T>;
    perform(sideEffect: (list: List<T>) => void): void;
    performOnEmpty(sideEffect: (list: List<T>) => void): void;
    performOnNonEmpty(sideEffect: (list: List<T>) => void): void;
    forEach(sideEffects: (item: T) => void): void;
    size(): number;
    isEmpty(): boolean;
    isNotEmpty(): boolean;
    sort(): List<T>;
    sortBy<U>(f: (item: T) => U): List<T>;
    sortDescendingly(): List<T>;
    sortDescendinglyBy<U>(f: (item: T) => U): List<T>;
    contains(item: T): boolean;
    equals(otherList: List<T>): boolean;
    all(predicate: (item: T) => boolean): boolean;
    some(predicate: (item: T) => boolean): boolean;
    none(predicate: (item: T) => boolean): boolean;
    count(predicate: (item: T) => boolean): number;
}
export declare function list<T>(...array: T[]): List<T>;
export declare function emptyList<T>(): List<T>;
export declare function listFromArray<T>(array: T[]): List<T>;
